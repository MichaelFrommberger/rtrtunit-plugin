options {STATIC = false ;} PARSER_BEGIN(SyntaxRioReader)package com.thalesgroup.rtrtunit.rioreader;import com.thalesgroup.rtrtunit.rioreader.RioStructure;import com.thalesgroup.rtrtunit.rioreader.RioTest;import com.thalesgroup.rtrtunit.rioreader.RioFailedVariable;public class SyntaxRioReader {  public RioStructure read()  {    RioStructure rioStructure = null;				try		{			rioStructure =  S();		}		catch (Throwable e)		{			System.out.println(" Error during reading the file: " + e.getMessage());		}		finally		{			return rioStructure;		}  }}PARSER_END(SyntaxRioReader)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{  < NUM: ["0"-"9","-"](["0"-"9","E","e","+","-","."])* > |  < NAN: ("-")? (["0"-"9"])*".#IND"(["0"-"9","E","e","+","-"])+>|  < VAR: "\"" ([ "a"-"z", "A"-"Z", "-", "_", ",", "0"-"9", "%", "\\", "|", "@", "<", ">" ])* "\"" >|  < CHAR: "\'"("\\")?(["a"-"z","A"-"Z","0"-"9"])"\'">|  < UNKNOWN: "!! ? !!" >|  < HMSTIME: ([ "0"-"9" ])? [ "0"-"9" ] ":" [ "0"-"9" ] [ "0"-"9" ] ":" [ "0"-"9" ] [ "0"-"9" ] >}TOKEN :{  < MON : "Mon" >|   < TUE : "Tue" >|   < WED : "Wed" >|   < THU : "Thu" >|   < FRI : "Fri" >|   < SAT : "Sat" >|   < SUN : "Sun" >|   < JAN : "Jan" >|   < FEB : "Feb" >|   < MAR : "Mar" >|   < APR : "Apr" >|   < MAY : "May" >|   < JUN : "Jun" >|   < JUL : "Jul" >|   < AUG : "Aug" >|   < SEP : "Sep" >|   < OCT : "Oct" >|   < NOV : "Nov" >|   < DEC : "Dec" >}TOKEN :{  < HNUM : "H" ([ "0"-"9" ])+ >|   < ENUM : "E" ([ "0"-"9" ])+ >|   < ONUM : "O" ([ "0"-"9" ])+ >|   < TNUM : "T" ([ "0"-"9" ])+ >|   < NNUM : "N" ([ "0"-"9" ])+ >|   < DNUM : "D" ([ "0"-"9" ])+ >|   < MNUM : "M" ([ "0"-"9" ])+ >|   < VNUM : "V" ([ "0"-"9" ])+ >|  < BNUM : "B" ([ "0"-"9" ])+ >|  < RNUM : "R" ([ "0"-"9" ])+ >|     < XNUM : "X" ([ "0"-"9" ])+ >|  < ZNUM : "Z" ([ "0"-"9" ])+ >|      < ANUM : "A" ([ "0"-"9" ])+ >|  < LNUM : "L"(["0"-"9"])+" "["O","N"] >}TOKEN :{  < RAT : "RA=T" >|   < RAF : "RA=F" >|  < OK : "OK" >|  < BAD : "BAD" >|  < MINUM : "MI=" ["0"-"9","-"](["0"-"9","E","e","+","-","."])* >|   < MIVAR : "MI=" "\"" ([ "a"-"z", "A"-"Z", "-", "_", ",", "0"-"9", "%", "\\", "|", "@", "<", ">"])* "\"" >|  < MICHAR : "MI=""\'"("\\")?(["a"-"z","A"-"Z","0"-"9"])"\'" > |   < MANUM : "MA=" ["0"-"9","-"](["0"-"9","E","e","+","-","."])* >|   < MAVAR : "MA=" "\"" ([ "a"-"z", "A"-"Z", "-", "_", ",", "0"-"9", "%", "\\", "|", "@", "<", ">"])* "\"" >|  < MACHAR : "MA=""\'"("\\")?(["a"-"z","A"-"Z","0"-"9"])"\'" >}TOKEN:{  <FUSEAU: (["a"-"z","A"-"Z","-","_",",","0"-"9","/"])*>}RioStructure S() :{  RioStructure rioStructure = new RioStructure();  RioTest rioTest;}{  (H())?  (E())?  O()  (    [O()]    rioTest = T()    {      rioStructure.add(rioTest);    }  )*  (E())?  < EOF >  {    return rioStructure;  }}void H(): {}{  <HNUM> Date()}void Date(): {}{	Date1() | Date2()}void Date1(): {}{  // <Day> <Month> <monthDay> <hh:mm:ss> <Fuseau>? <year>  DAY() MONTH() <NUM> <HMSTIME> [<FUSEAU>] <NUM>}void Date2(): {}{  // <Month> <monthDay> <year> <hh:mm:ss>  MONTH() <NUM> <NUM> <HMSTIME>}void E(): {}{  <ENUM> [<NUM>]}void DAY() :{}{  < MON >| < TUE >| < WED >| < THU >| < FRI >| < SAT >| < SUN >}void MONTH() :{}{  < JAN >| < FEB >| < MAR >| < APR >| < MAY >| < JUN >| < JUL >| < AUG >| < SEP >| < OCT >| < NOV >| < DEC >}void O() :{}{  < ONUM >}RioTest T() :{  RioTest rioTest = new RioTest();  RioFailedVariable rioFailedVar;  Token name, time;  String stubId;  float timeValue = 0.f;}{  name = < TNUM >  {    rioTest.setName(name.image);  }    // L+  ( (L())+   | // N+ V*    (N())+ (      rioFailedVar = V()      {         if (rioFailedVar.isFailed())         {           rioTest.addFailedVariables(rioFailedVar);         }      }    )*   | // D (M (R? V)*)+     time = D()     {		timeValue += Float.parseFloat(time.image);        rioTest.setTime(Float.toString(timeValue));     }     (       stubId = M()       (       	  [R()]          rioFailedVar = V()          {             // special case for pattern:             // M1 0             // V0 ...             // which represents stub function call counts             if (rioFailedVar.getName().equals("V0")) {               rioFailedVar.setName(stubId);             }             if (rioFailedVar.isFailed())             {               rioTest.addFailedVariables(rioFailedVar);             }          }       )*     )+   | // B X* Z* A (M? V)*     B() (X())* (Z())* A() ([M()] V())*  )+  {    return rioTest;  }}void N() :{}{  < NNUM > ARG()}void L() :{}{  < LNUM > < NUM > < NUM >}Token D() :{  Token time;}{  < DNUM >   time = < NUM >  {    return time;  }}String M() :{  Token name;}{  name = < MNUM >  < NUM >  {    return name.image;  }}RioFailedVariable V() :{  RioFailedVariable rioFailedVar = new RioFailedVariable();  Token name, expectedValue, givenValue;  Token failed;}{  name = < VNUM >  {    rioFailedVar.setName(name.image);  }  givenValue = ARG()  {    rioFailedVar.setGivenValue(givenValue.image);  }  failed = RA()  {    rioFailedVar.setFailed(failed.image);  }  [    expectedValue = MIMA()    {      rioFailedVar.setExpectedValue(expectedValue.image);    }  ]  {    return rioFailedVar;  }}void B() : {}{	< BNUM >	}void R(): {}{  <RNUM> <NUM>}void X(): {}{	< XNUM > ARG() RA() [MIMA()]}void Z(): {}{	< ZNUM > < NUM >}void A(): {}{	< ANUM >  STATUS()  RA()}void STATUS(): {}{	< OK > | < BAD >}Token ARG() :{  Token expectedValue;}{  expectedValue = < NUM >  {    return expectedValue;  }|   expectedValue = < VAR >  {    return expectedValue;  }|   expectedValue = < CHAR >  {    return expectedValue;  }|   expectedValue = < NAN >  {    return expectedValue;  }|  expectedValue = < UNKNOWN >  {    return expectedValue;  }}Token RA() :{  Token failed;}{  failed = < RAT >  {    return failed;  }|   failed = < RAF >  {    return failed;  }}Token MIMA() :{  Token givenValue;}{  MI()   givenValue = MA()  {    return givenValue;  }}void MI() :{}{  < MINUM >| < MIVAR >| < MICHAR >}Token MA() :{  Token givenValue;}{  givenValue = < MANUM >  {    return givenValue;  }|   givenValue = < MAVAR >  {    return givenValue;  }|   givenValue = < MACHAR >  {    return givenValue;  }}
